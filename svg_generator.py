from sapient import species
from lxml import etree

# Thanks to Filip Němeček for making a function I could plagirize or something lol.
def check_contrast(hex_color):
        color = hex_color[1:]

        hex_red = int(color[0:2], base=16)
        hex_green = int(color[2:4], base=16)
        hex_blue = int(color[4:6], base=16)

        if (hex_red * 0.2126 + hex_green * 0.7152 + hex_blue * 0.0722 < 140):
            return("#ffffff")
        else:
            return("#000000")

class builder:
    def __init__(self,filename):   
        with open(filename) as file:
            xml = file.read()
        self.fanfic = False
        self.isCured = False
        self.isAltered = False
        self.root = etree.fromstring(bytes(xml,encoding = 'utf-8'))
        self.name_pos = self.root.xpath("svg:g/svg:g[@id='a-side-text']/svg:text[@id='name']", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]
        self.name = self.root.xpath("svg:g/svg:g[@id='a-side-text']/svg:text[@id='name']/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]
        self.homeworld = self.root.xpath("svg:g/svg:g[@id='a-side-text']/svg:text[@id='homeworld']/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]
        self.blood = self.root.xpath("svg:g/svg:g[@id='a-side-text']/svg:text[@id='blood-color']/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]
        self.fed_id = self.root.xpath("svg:g/svg:g[@id='a-side-text']/svg:text[@id='fed-id']/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]
        self.diet = self.root.xpath("svg:g/svg:g[@id='a-side-text']/svg:text[@id='diet']/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]
        self.ftitle = self.root.xpath("svg:g/svg:g[@id='a-side-text']/svg:g[@id='fanfic-data']/svg:text[@id='fanfic-title']", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]
        self.fauth = self.root.xpath("svg:g/svg:g[@id='a-side-text']/svg:g[@id='fanfic-data']/svg:text[@id='fanfic-author']/svg:tspan/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]
        self.ffrom = self.root.xpath("svg:g/svg:g[@id='a-side-text']/svg:g[@id='fanfic-data']/svg:text[@id='fanfic-header-from']/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]
        self.desc = self.root.xpath("svg:g/svg:text[@id='desc']/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]
        self.flavor = self.root.xpath("svg:g/svg:g[@id='b-side-text']/svg:text[@id='flavor-text']", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]
        
        self.affilheads = [ #Some of these have deeper layers for god knows what reason and I do not dare touch the satan spaghetti of XML SVG tags autogenerated by inkscape, so here they remain.
            self.root.xpath("svg:g/svg:g[@id='b-side-text']/svg:g[@id='affiliation-0']/svg:text[@id='affil-head-0']/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0],
            self.root.xpath("svg:g/svg:g[@id='b-side-text']/svg:g[@id='affiliation-1']/svg:text[@id='affil-head-1']/svg:tspan/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0],
            self.root.xpath("svg:g/svg:g[@id='b-side-text']/svg:g[@id='affiliation-2']/svg:text[@id='affil-head-2']/svg:tspan/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0],
            self.root.xpath("svg:g/svg:g[@id='b-side-text']/svg:g[@id='affiliation-3']/svg:text[@id='affil-head-3']/svg:tspan/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0],
            self.root.xpath("svg:g/svg:g[@id='b-side-text']/svg:g[@id='affiliation-4']/svg:text[@id='affil-head-4']/svg:tspan/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0],
            self.root.xpath("svg:g/svg:g[@id='b-side-text']/svg:g[@id='affiliation-5']/svg:text[@id='affil-head-5']/svg:tspan/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0],
        ]

        for head in self.affilheads:
            head.text = ' '


        self.affildescs = [
            self.root.xpath("svg:g/svg:g[@id='b-side-text']/svg:g[@id='affiliation-0']/svg:text[@id='affil-desc-0']/svg:tspan/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0],
            self.root.xpath("svg:g/svg:g[@id='b-side-text']/svg:g[@id='affiliation-1']/svg:text[@id='affil-desc-1']/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0],
            self.root.xpath("svg:g/svg:g[@id='b-side-text']/svg:g[@id='affiliation-2']/svg:text[@id='affil-desc-2']/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0],
            self.root.xpath("svg:g/svg:g[@id='b-side-text']/svg:g[@id='affiliation-3']/svg:text[@id='affil-desc-3']/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0],
            self.root.xpath("svg:g/svg:g[@id='b-side-text']/svg:g[@id='affiliation-4']/svg:text[@id='affil-desc-4']/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0],
            self.root.xpath("svg:g/svg:g[@id='b-side-text']/svg:g[@id='affiliation-5']/svg:text[@id='affil-desc-5']/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]
        ]
        
        for desc in self.affildescs:
            desc.text = ' '

        self.bistance_stance = [
            self.root.xpath("svg:g/svg:g[@id='a-side-text']/svg:g[@id='stance-1']/svg:text[@id='stance-name-1']/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0],
            self.root.xpath("svg:g/svg:g[@id='a-side-text']/svg:g[@id='stance-2']/svg:text[@id='stance-name-2']/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]
        ]

        for stance in self.bistance_stance:
            stance.text = ' '
        
        self.bistance_height = [
            self.root.xpath("svg:g/svg:g[@id='a-side-text']/svg:g[@id='stance-1']/svg:text[@id='height-1']/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0],
            self.root.xpath("svg:g/svg:g[@id='a-side-text']/svg:g[@id='stance-2']/svg:text[@id='height-2']/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]
        ]
    
        for stance in self.bistance_height:
            stance.text = ' '
        
        self.monostance_stance = self.root.xpath("svg:g/svg:g[@id='a-side-text']/svg:g[@id='stance-0']/svg:text[@id='stance-name-0']/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]
        self.monostance_stance.text = ' '
        self.monostance_height = self.root.xpath("svg:g/svg:g[@id='a-side-text']/svg:g[@id='stance-0']/svg:text[@id='height-0']/svg:tspan", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]
        self.monostance_height.text = ' '

        self.cure_badge = self.root.xpath("svg:g/svg:g[@id='a-side-text']/svg:g[@id='cure-badge']", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]
        self.alter_badge = self.root.xpath("svg:g/svg:g[@id='a-side-text']/svg:g[@id='alter-badge']", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]

        self.kisser = self.root.xpath("svg:g/svg:g[@id='portrait']/svg:image", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]

        self.bg_aside = self.root.xpath("svg:g/svg:rect[@id='backdrop-a-side']", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]
        self.bg_bside = self.root.xpath("svg:g/svg:rect[@id='backdrop-b-side']", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]

        self.style_aside = self.root.xpath("svg:defs/svg:style[@id='a-side-style']", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]
        self.style_bside = self.root.xpath("svg:defs/svg:style[@id='b-side-style']", namespaces={'svg':'http://www.w3.org/2000/svg'})[0]

    def build(self,species):
        self.set_name(species.name)
        self.set_id(species.id)

        if(species.num_stances() == 1):
            self.set_monostance(species.get_stance(0)['stance'], species.fancy_height(0))
        else:
            self.set_bistance(species.get_stance(0)['stance'], species.fancy_height(0),species.get_stance(1)['stance'], species.fancy_height(1))

        self.set_blood(species.blood)
        self.set_homeworld(species.homeworld)
        self.set_diet(species.diet)
        
        self.set_fanfic(species.fic_name, species.fic_author)
        
        self.set_badges(species.cure, species.alter)

        for i in range(0,5):
            if(i < len(species.affiliations)):
                self.set_affil_head(i, species.get_affil_name(i))
                self.set_affil_desc(i, species.get_affil_desc(i))
            else:
                self.set_affil_head(i, " ")
                self.set_affil_desc(i, " ")
        
        self.set_desc(species.desc)
        self.set_flavor(species.flavor)

        self.set_color_a(species.color_A_side)
        self.set_color_b(species.color_B_side)
        self.set_image("./assets/kissers/"+species.name+"-kisser.png")
        self.export("tmp.svg")
        

    # Set the color for the a-side of the image. Ajust text color for contrast.
    def set_color_a(self,colorIn):
        self.bg_aside.attrib['style'] = "fill: " + colorIn + ";fill-opacity: 1;"
        self.style_aside.text=".a-side {\nfill:" + check_contrast(colorIn) + ";\n }"

    # Set the color for the b-side of the image. Ajust text color for contrast.
    def set_color_b(self,colorIn):
        self.bg_bside.attrib['style'] = "fill: " + colorIn + ";fill-opacity: 1;"
        self.style_bside.text=".b-side {\nfill:" + check_contrast(colorIn) + ";\n }"

    
    # Set the species name.
    def set_name(self,nameIn):
        self.name.text = nameIn
    
    # Set the species fed id.
    def set_id(self,idIn):
        if(idIn == None):
            self.name_pos.attrib['transform'] = "translate(-139.5019,0)"
            self.fed_id.text = ' '
        else:
            self.name_pos.attrib['transform'] = "translate(-139.5019,-46.630571)"
            self.fed_id.text = idIn

    # Set the blood color text.
    def set_blood(self,bloodIn):
        self.blood.text = bloodIn

    # Set the heights
    def set_bistance(self,stance0,height0,stance1,height1):
        self.monostance_stance.text = ' '
        self.monostance_height.text = ' '

        self.bistance_stance[0] = stance0
        self.bistance_height[0] = height0

        self.bistance_stance[1] = stance1
        self.bistance_height[1] = height1

    def set_monostance(self,stance,height):
        for st in self.bistance_height:
            st = ' '
        
        for st in self.bistance_stance:
            st = ' '
        
        self.monostance_stance.text = stance
        self.monostance_height.text = height

    # Set the homeworld
    def set_homeworld(self,homeworldIn):
        self.homeworld.text = homeworldIn

    # Set the diet
    def set_diet(self,dietIn):
        self.diet.text = dietIn

    # Set affiliations
    def set_affil_head(self,index,head):
        self.affilheads[index].text = head
    
    def set_affil_desc(self,index,desc):
        self.affildescs[index].text = desc
    
    def set_fanfic(self,name,author):
        if(name == None):
            self.fanfic = False
            self.ffrom.text = ' '
            self.ftitle.text = ' '
            self.fauth.text = ' '
        else:
            self.fanfic = True
            self.ffrom.text = 'from'
            self.ftitle.text = name
            self.fauth.text = author
        
        self.set_badges(self.isCured, self.isAltered)

    # Set image
    def set_image(self,imagefile):
        self.kisser.attrib['href'] = imagefile
    
    def set_badges(self, cure, alter):
        self.isCured = cure
        self.isAltered = alter
        if(cure and alter):
            if(self.fanfic):
                self.cure_badge.attrib['transform'] = "translate(-412.07,-1060.24)"
                self.alter_badge.attrib['transform'] = "translate(-374.967,-891.952)"
            else:
                self.cure_badge.attrib['transform'] = "translate(-412.07,-982.96)"
                self.alter_badge.attrib['transform'] = "translate(177.033,-982.973)"
        elif(cure):
            self.cure_badge.attrib['transform'] = "translate(-412.07,-982.96)"
            self.alter_badge.attrib['transform'] = "translate(0,0)"
        elif(alter):
            self.cure_badge.attrib['transform'] = "translate(0,0)"
            self.alter_badge.attrib['transform'] = "translate(-374.967,-982.973)"
        else:
            self.cure_badge.attrib['transform'] = "translate(0,0)"
            self.alter_badge.attrib['transform'] = "translate(0,0)"

    def set_desc(self,descIn):
        self.desc.text = descIn
    
    def set_flavor(self,flavorIn):
        self.flavor.text = flavorIn

    
    def export(self,filename):
        with open(filename, 'w') as file:
            file.write(etree.tostring(self.root).decode('utf-8'))

